#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Thu Jan  3 20:21:40 2013

import wx, CcsCalculatorListCtrl, PlottingOptionsListCtrl, os
import AtdPanel,ApplyCalibrationGuiSettings

# begin wxGlade: extracode
# end wxGlade

"""Simple program for converting arrival time distributions to CCS and
calculating CCS for peak top arrival time values.
"""

class ApplyCalibration(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ApplyCalibration.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.textCtrlOpenCalibration = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonCalibrationOpen = wx.Button(self.window_1_pane_1, -1, "Open")
        self.sizer_2_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "     Calibration")
        self.textCtrlOpenCoordinates = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonCoordOpen = wx.Button(self.window_1_pane_1, -1, "Open")
        self.textCtrlMz = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.label_1 = wx.StaticText(self.window_1_pane_1, -1, "m/z")
        self.textCtrlCharge = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.label_2 = wx.StaticText(self.window_1_pane_1, -1, "charge")
        self.radioTd = wx.RadioButton(self.window_1_pane_1, -1, "Display td")
        self.radioCcs = wx.RadioButton(self.window_1_pane_1, -1, "Display CCS")
        self.panelPlottingOptions = wx.Panel(self.window_1_pane_1, -1)
        self.buttonPlottingUpdate = wx.Button(self.window_1_pane_1, -1, "Update")
        self.sizer_5_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "Plotting options")
        self.sizer_3_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "Co-ord file")
        self.panelCcsCalculator = wx.Panel(self.window_1_pane_1, -1)
        self.buttonCcsCalculate = wx.Button(self.window_1_pane_1, -1, "Calculate")
        self.sizer_4_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "CCS calculator")
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.eventOpenCalibration, self.buttonCalibrationOpen)
        self.Bind(wx.EVT_BUTTON, self.eventOpenCoordFile, self.buttonCoordOpen)
        self.Bind(wx.EVT_RADIOBUTTON, self.eventRadioButtonDisplayTd, self.radioTd)
        self.Bind(wx.EVT_RADIOBUTTON, self.eventRadioButtonDisplayCcs, self.radioCcs)
        self.Bind(wx.EVT_BUTTON, self.eventPlottingUpdate, self.buttonPlottingUpdate)
        self.Bind(wx.EVT_BUTTON, self.eventCcsCalculate, self.buttonCcsCalculate)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ApplyCalibration.__set_properties
        self.SetTitle("Amphitrite - Apply calibration beta")
        self.SetSize((946, 626))
        self.panelPlottingOptions.SetMinSize((186, 100))
        # end wxGlade
        self.panelCcsCalculator = CcsCalculatorListCtrl.CcsCalculatorListCtrl(self.window_1_pane_1)
        self.panelPlottingOptions = PlottingOptionsListCtrl.PlottingOptionsListCtrl(self.window_1_pane_1)
        self.atdPanel = AtdPanel.AtdPanel(self.window_1_pane_2)
        self.settings = ApplyCalibrationGuiSettings.ApplyCalibrationGuiSettings()

        self.settings.atdPanel = self.atdPanel
        self.settings.panelCcsCalculator = self.panelCcsCalculator
        self.settings.panelPlottingOptions = self.panelPlottingOptions

        self.atdPanel.setSettings(self.settings)
        self.panelCcsCalculator.setSettings(self.settings)
        self.panelPlottingOptions.setSettings(self.settings)

        #=======================================================================
        # Settings Default Values
        #=======================================================================
        self.textCtrlOpenCalibration.SetValue(os.path.expanduser('~')+'/Dropbox/workspaces/Amphitrite_2.0/gui/ApplyCalibrationGui/1211_sample_21_w_pyk.calibration')
        self.settings.calibrationPath = os.path.expanduser('~')+'/Dropbox/workspaces/Amphitrite_2.0/gui/ApplyCalibrationGui/1211_sample_21_w_pyk.calibration'
        self.textCtrlOpenCoordinates.SetValue(os.path.expanduser('~')+'/Dropbox/workspaces/Amphitrite_2.0/gui/ApplyCalibrationGui/170117_kreal3_IES_004_13z.txt')
        self.settings.coordinatesPath = os.path.expanduser('~')+'/Dropbox/workspaces/Amphitrite_2.0/gui/ApplyCalibrationGui/170117_kreal3_IES_004_13z.txt'
        self.textCtrlMz.SetValue(str(3551.1))
        self.textCtrlCharge.SetValue(str(13))


    def __do_layout(self):
        # begin wxGlade: ApplyCalibration.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(3, 1, 0, 0)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        grid_sizer_6 = wx.FlexGridSizer(2, 1, 0, 0)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_3 = wx.FlexGridSizer(3, 1, 0, 0)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        grid_sizer_7 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_4 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_5 = wx.FlexGridSizer(3, 2, 0, 0)
        self.sizer_2_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_2.Add(self.textCtrlOpenCalibration, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.buttonCalibrationOpen, 0, 0, 0)
        grid_sizer_2.AddGrowableCol(0)
        sizer_2.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.textCtrlOpenCoordinates, 0, wx.EXPAND, 0)
        grid_sizer_5.Add(self.buttonCoordOpen, 0, 0, 0)
        grid_sizer_5.Add(self.textCtrlMz, 0, wx.EXPAND, 0)
        grid_sizer_5.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_5.Add(self.textCtrlCharge, 0, wx.EXPAND, 0)
        grid_sizer_5.Add(self.label_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_5.AddGrowableCol(0)
        grid_sizer_3.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.radioTd, 0, 0, 0)
        grid_sizer_4.Add(self.radioCcs, 0, 0, 0)
        grid_sizer_4.AddGrowableCol(0)
        grid_sizer_3.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.panelPlottingOptions, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.buttonPlottingUpdate, 0, wx.EXPAND, 0)
        grid_sizer_7.AddGrowableRow(0)
        grid_sizer_7.AddGrowableCol(0)
        sizer_5.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)
        grid_sizer_3.AddGrowableRow(2)
        grid_sizer_3.AddGrowableCol(0)
        sizer_3.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_6.Add(self.panelCcsCalculator, 1, wx.EXPAND, 0)
        grid_sizer_6.Add(self.buttonCcsCalculate, 0, wx.EXPAND, 0)
        grid_sizer_6.AddGrowableRow(0)
        grid_sizer_6.AddGrowableCol(0)
        sizer_4.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(grid_sizer_1)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableRow(2)
        grid_sizer_1.AddGrowableCol(0)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 216)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def eventOpenCalibration(self, event):  # wxGlade: ApplyCalibration.<event_handler>
        """Open pickled imClasses.Calibration() object, using a FileDialog.
        """
        dlg = wx.FileDialog(self, message="Open Amphitrite Calibration File",
                            defaultFile="",
                            wildcard="Text file (*.calibration)|*.calibration",
                            style=wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.settings.setCalibrationPath(dlg.GetPath())
        dlg.Destroy()
        self.textCtrlOpenCalibration.SetValue(self.settings.calibrationPath)


    def eventOpenCoordFile(self, event):  # wxGlade: ApplyCalibration.<event_handler>
        """Open and display an arrival time distribution. Input data is in the format of
        td\tI\n for each datapoint.
        """
        dlg = wx.FileDialog(self, message="Open Coordinate Text File",
                            defaultFile="",
                            wildcard="Text file (*.txt)|*.txt",
                            style=wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.settings.setCoordinatesPath(dlg.GetPath())
        dlg.Destroy()
        self.textCtrlOpenCoordinates.SetValue(self.settings.coordinatesPath)
        self._loadTd()
        self.atdPanel.plotAtd()

    def eventCcsCalculate(self, event):  # wxGlade: ApplyCalibration.<event_handler>
        """Update the ListCtrl for the calculation of CCS.
        """
        self.panelCcsCalculator.calculate()

    def eventPlottingUpdate(self, event):  # wxGlade: ApplyCalibration.<event_handler>
        """Update the plotting panel after changing what is to be displayed.
        """
        self.panelPlottingOptions.updateSettings()

    def eventRadioButtonDisplayTd(self, event):  # wxGlade: ApplyCalibration.<event_handler>
        """Event for when display is toggled from CCS to arrival time distribution.
        Plot panel is updated accordingly.
        """
        self._loadTd()
        self.atdPanel.plotAtd()
        #self.panelPlottingOptions.updateSettings()
        self.settings.displayedView = 'td'

    def _loadTd(self):
        """Open the arrival time distribution co-ordinate file.
        """
        if not self.settings.coordinatesLoaded:
            if os.path.isfile(self.settings.coordinatesPath):
                self.atdPanel.openAtd()
            else:
                # TODO(gns) - This should be a warning dialog
                print 'Coordinate file not found:', self.settings.coordinatesPath

    def eventRadioButtonDisplayCcs(self, event):  # wxGlade: ApplyCalibration.<event_handler>
        """Event for when display is toggled from arrival time to CCS distribution.
        Plot panel is updated accordingly.
        """
        ready = self.settings.readyForCcs(self.textCtrlMz.GetValue(),
                                           self.textCtrlCharge.GetValue())
        if not ready:
            dlg = wx.MessageDialog(self,
                "Enter calibration path, m/z and charge values",
                "Fill in everything", wx.OK|wx.ICON_EXCLAMATION)
            result = dlg.ShowModal()
            dlg.Destroy()
        else:
            if not self.settings.calibrationLoaded:
                self.settings.setCalibration()
            self.settings.getCcsAxis()
            self.atdPanel.plotCcs()
            self.atdPanel.autoAxisX(ccs=True)
            #self.panelPlottingOptions.updateSettings()
            self.settings.displayedView = 'CCS'

            print \
'''
#------------------------------------------------------------------------------
# Harpal!!! The coordinates start here
#------------------------------------------------------------------------------
'''
            for ccs,its in zip(self.settings.ccs,self.atdPanel.atd.yvals):
                print ccs, its


# end of class ApplyCalibration
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frameApplyCalibration = ApplyCalibration(None, -1, "")
    app.SetTopWindow(frameApplyCalibration)
    frameApplyCalibration.Show()
    app.MainLoop()

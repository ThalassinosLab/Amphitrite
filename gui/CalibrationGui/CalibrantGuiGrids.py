#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.5 on Wed Nov  7 10:33:23 2012

"""ListCtrl (table) for selecting calibrant charge states for
calculation of a calibration."""

__author__ = "Ganesh N. Sivalingam <g.n.sivalingam@gmail.com"

import wx
import wx.lib.mixins.listctrl  as  listmix
from wx.lib.mixins.listctrl import CheckListCtrlMixin, ListCtrlAutoWidthMixin

import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigCanvas, \
    NavigationToolbar2WxAgg as NavigationToolbar
import matplotlib.pyplot as plt


import numpy as np
import collections
from lib import utils
from imClasses.Calibration import Calibration

class CheckListCtrl(wx.ListCtrl, CheckListCtrlMixin, ListCtrlAutoWidthMixin):
    
    def __init__(self, parent,calibrants,settings,figure,text_ctrl_peak):
        wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        CheckListCtrlMixin.__init__(self)

        ListCtrlAutoWidthMixin.__init__(self)
        self.Bind(wx.EVT_LIST_BEGIN_LABEL_EDIT, self.OnBeginLabelEdit)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnRowSelected)
        
        self.calibrants = calibrants
        self.figure = figure
        self.rowIndexDictionary = {}
        self.calibrantChargesAll = collections.OrderedDict()
        self.calibrantChargesSelected = collections.OrderedDict()
        self.settings = settings
        self.displayedProtein = ''
        self.text_ctrl_peak = text_ctrl_peak
        self.selectedRow = None

    
    def OnBeginLabelEdit(self, event):
        if event.m_col in [1,3]:
            event.Veto()
        else:
            event.Skip()
    
    def reviseColourList(self,proName,colourList=0):
        if not colourList:
            colourList = utils.colourList
        allZs = self.calibrantChargesAll[proName]
        selectedZs  = self.calibrantChargesSelected[proName]

        revisedColourList = []
        for z in selectedZs:
            i = allZs.index(z)
            revisedColourList.append(colourList[i])
        return revisedColourList
    def OnRowSelected(self,event):
        if not self.figure.pickingActive:
            rowProtein = self.rowIndexDictionary[event.GetIndex()][0]
            if rowProtein != self.displayedProtein:
                self._plotMsTds(rowProtein)
            self.selectedRow = event.GetIndex()
            self.text_ctrl_peak.SetValue("%.2f" %self.rowIndexDictionary[event.GetIndex()][2])
    
    def setTdValue(self,td):
        self.SetStringItem(self.selectedRow,2,"%.2f" %float(td))
        name,z = self.rowIndexDictionary[self.selectedRow][:2]
        self.rowIndexDictionary[self.selectedRow][2] = td
        self.calibrants[name].setTdValue(td, z)
        self.calibrantChargesSelected[name] = self.calibrants[name].charges[:]
        
        # plotting
        self.createCalibration()
        self._plotTds(self.displayedProtein)
        
    
    def getCharge(self):
        """Get charge state of currently selected row in ListCtrl.
        :returns: Charge (int)
        """
        return self.rowIndexDictionary[self.selectedRow][1]
    def getProName(self):
        """Get calibrant name of currently selected row in ListCtrl.
        :returns: Name (string)
        """
        return self.rowIndexDictionary[self.selectedRow][0]
    def getTdValue(self):
        """Get arrival time for charge state peak for currently selected row in ListCtrl.
        :returns: Arrival time (float)
        """
        return self.rowIndexDictionary[self.selectedRow][2]
    
    def _plotTds(self,proName):
        """Redraw the arrival time distributions for the middle panel plot.
        :parameter proName: Calibrant name to show
        """
        colourList = self.reviseColourList(proName)
        self.figure.axTds.cla()
        self.calibrants[proName].plotChargeStateAtds(self.figure.axTds,colourList=colourList)
        self.calibrants[proName].plotCalibrantTdPeaks(self.figure.axTds,colourList=colourList)
        
        self.figure.axTds.set_xlim(self.settings.xlimsTds[proName])
        self.figure.axTds.set_ylim(self.settings.ylimsTds[proName])
        self.figure.canvas.draw()
    
    def OnCheckNothing(self, index, flag):
        # TODO(gns) - Remove this. _drawList() needs to be updated as well.
        pass 

    def _plotMsTds(self,proName):
        """Plot the mass spectrum for a calibrant, and show the extraction limits for
        each charge state.
        :parameter proName: Calibrant name (string)
        """
        self._plotTds(proName)
        colourList = self.reviseColourList(proName)
        self.figure.axMs.cla()
        self.calibrants[proName].plotMsAndExtractionLimits(self.figure.axMs,colourList=colourList)
        
        self.figure.axMs.set_xlim(self.settings.xlimsMs[proName])
        self.figure.axMs.set_ylim(self.settings.ylimsMs[proName])
        
        self.displayedProtein = proName
        self.figure.canvas.draw()

    def OnCheckItem(self, index, flag):
        """Update calibration and the middle (td) and lower (calibration) plots.
        :parameter index: Index of ListCtrl for the peak
        :parameter flag: Boolean for if the box was checked or unchecked
        """
        proName,z,td = self.rowIndexDictionary[index]
        
        if flag == False:
            i = self.calibrantChargesSelected[proName].index(z)
            del self.calibrantChargesSelected[proName][i]
        elif flag == True:
            self.calibrantChargesSelected[proName].append(z)
            self.calibrantChargesSelected[proName] = sorted(self.calibrantChargesSelected[proName])
        self.calibrants[proName].setCharges(self.calibrantChargesSelected[proName])

        self._plotMsTds(proName)
        self.createCalibration()         
        self.figure.canvas.draw()
    
    def pickPeak(self):
        """Draw vertical line indicating the newly picked arrival time value.
        """
        if self.selectedRow != None:
            self.figure.axTds.cla()
            self.figure.axTds.set_picker(True)
            name,z = self.rowIndexDictionary[self.selectedRow][:2]
            self.calibrants[name].plotChargeStateAtds(self.figure.axTds,charges=[z])
            self.figure.axTds.set_xlim(self.settings.xlimsTds[name])
            self.figure.axTds.set_ylim(self.settings.ylimsTds[name])
            
            self.figure.axTds.axvline(self.getTdValue(),color='k')
            self.figure.canvas.draw()
            return 0
        else:
            return 1
 
    def createCalibration(self):
        """Recalculate calibration curve and plot calibration curve.
        """
        self.figure.createCalibration()


class CalibrantGrid(wx.Panel):
    """
    :parameter parent: wx Gui panel
    :parameter calibrants: Dictionary of imClasses.Calibrant() objects as values,
    key is calibrant name
    :parameter settings: CalibrationGuiSettings() object
    :parameter figure: CalibrationGuiPlotting() object
    :parameter text_ctrl_peak: TextCtrl object for editing peak arrival times manually
    """
    # TODO(gns) - rename class as it is a list ctrl not a grid now.
    def __init__(self, parent, calibrants, settings, figure, text_ctrl_peak):
        wx.Panel.__init__(self, parent)
 
        self.list_ctrl = CheckListCtrl(self, calibrants, settings, figure, text_ctrl_peak)
        self.data = collections.OrderedDict()
        
        self.list_ctrl.InsertColumn(0, "Use",width=40)
        self.list_ctrl.InsertColumn(1, "Charge",width=50)
        self.list_ctrl.InsertColumn(2, "td",width=50)
        self.list_ctrl.InsertColumn(3, "Protein",width=70)

        sizer_1 = wx.FlexGridSizer(1, 1, 0, 0) 
        sizer_1.Add(self.list_ctrl, 1, wx.EXPAND)  
        sizer_1.AddGrowableRow(0, 1)
        sizer_1.AddGrowableCol(0, 1)
        self.SetSizer(sizer_1)
    
    def clearData(self):
        """Clear the calibrant ListCtrl (table).
        """
        self.list_ctrl.ClearAll()
        self.list_ctrl.InsertColumn(0, "Use")
        self.list_ctrl.InsertColumn(1, "Charge")
        self.list_ctrl.InsertColumn(2, "Drift time")
        self.list_ctrl.InsertColumn(3, "Protein")
        
    def setData(self,calibrant):
        """Get calibrant arrival time distributions for different charge states.
        Update the currently displayed calibrant and redraw calibrant table.
        :parameter calibrant: imClasses.Calibrant() object
        """
        if self.data.has_key(calibrant.name):
            del self.data[calibrant.name]
        self.data[calibrant.name] = calibrant.getChargeTdsDict()
        self.list_ctrl.displayedProtein = calibrant.name
        self._drawList()
    
    
    def _drawList(self):
        """Clear calibrant ListCtrl (table) and fill in with updated
        information.
        """
        self.list_ctrl.DeleteAllItems()
        self.list_ctrl.calibrantChargesAll = collections.OrderedDict()
        self.list_ctrl.rowIndexDictionary = {}

        # TODO(gns) - this doesn't make sense
        # TODO(gns) - this overwriting of the function doesn't need to happen
        # TODO(gns) - also remove the function in CheckListCtrl() (above)
        bak = self.list_ctrl.OnCheckItem
        self.list_ctrl.OnCheckItem = self.list_ctrl.OnCheckNothing
        
        i = 0
        for name,pair in self.data.items():
            self.list_ctrl.calibrantChargesAll[name] = []
            for z,td in pair.items():
                self.list_ctrl.InsertStringItem(i, "" )
                self.list_ctrl.SetStringItem(i, 1, "%s" %(z))
                self.list_ctrl.SetStringItem(i, 2, "%.2f" %(round(td,2)))
                self.list_ctrl.SetStringItem(i, 3, "%s" %(name))
                self.list_ctrl.CheckItem(index=i, check=True)
                
                self.list_ctrl.calibrantChargesAll[name].append(z)
                self.list_ctrl.rowIndexDictionary[i] = [name,z,round(td, 2)]
                i += 1
        
        self.list_ctrl.OnCheckItem = bak
        for proName,zs in self.list_ctrl.calibrantChargesAll.items():
            if not proName in self.list_ctrl.calibrantChargesSelected:
                self.list_ctrl.calibrantChargesSelected[proName] = zs[:]
            
    def getNumberOfCheckedCharges(self):
        """Get the number of charge states across all calibrants to be used.
        :returns: nChecked (int)
        """
        nItems = self.list_ctrl.GetItemCount()
        nChecked = 0
        for i in xrange(nItems):
            if self.list_ctrl.IsChecked(i):
                nChecked += 1
        return nChecked
        
        
        
        
        
        

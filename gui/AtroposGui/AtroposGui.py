# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Mon Jan 28 14:57:24 2013

"""Program for deconvoluting native mass spectra."""

__author__ = "Ganesh N. Sivalingam <g.n.sivalingam@gmail.com"

import MassSpectrumPanel
import wx,os,copy
import ListCtrlOptimisation, ListCtrlAssigningSpecies 
import ListCtrlSmoothing,AtroposGuiSettings
import cPickle as pickle
from lib import utils
import gui.guiFunctions as gf


# begin wxGlade: extracode
# end wxGlade


class AtroposGui(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AtroposGui.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.label_1 = wx.StaticText(self.window_1_pane_1, -1, "Filename  ")
        self.textCtrlOpen = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonOpen = wx.Button(self.window_1_pane_1, -1, "Open")
        self.label_2 = wx.StaticText(self.window_1_pane_1, -1, "Grain  ")
        self.textCtrlGrain = wx.TextCtrl(self.window_1_pane_1, -1, "1")
        self.buttonLoad = wx.Button(self.window_1_pane_1, -1, "Load")
        self.sizer_2_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "File")
        self.listCtrlSmoothing = wx.Panel(self.window_1_pane_1, -1)
        self.buttonUpdate = wx.Button(self.window_1_pane_1, -1, "Update")
        self.radioBoxDisplay = wx.RadioBox(self.window_1_pane_1, -1, "Display", choices=["None", "Peak Picking", "Theoretical Charge States", "Simulation"], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.sizer_3_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "Peak finding")
        self.listCtrlAssigningSpecies = wx.Panel(self.window_1_pane_1, -1)
        self.buttonAddSpecies = wx.Button(self.window_1_pane_1, -1, "Add Species")
        self.buttonTogglePeakPicking = wx.ToggleButton(self.window_1_pane_1, -1, "Activate Peak Picking")
        self.sizer_4_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "Assigning Species")
        self.label_5 = wx.StaticText(self.window_1_pane_1, -1, "Single Peak FWHM")
        self.textCtrlSinglePeakFwhm = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.checkboxSinglePeakFwhm = wx.CheckBox(self.window_1_pane_1, -1, "")
        self.listCtrlOptimise = wx.Panel(self.window_1_pane_1, -1)
        self.buttonSimulate = wx.Button(self.window_1_pane_1, -1, "Simulate")
        self.buttonSave = wx.Button(self.window_1_pane_1, -1, "Save")
        self.sizer_5_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "Optimise")
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.eventButtonOpen, self.buttonOpen)
        self.Bind(wx.EVT_BUTTON, self.eventButtonLoad, self.buttonLoad)
        self.Bind(wx.EVT_BUTTON, self.eventButtonUpdate, self.buttonUpdate)
        self.Bind(wx.EVT_RADIOBOX, self.eventRadioBoxDisplay, self.radioBoxDisplay)
        self.Bind(wx.EVT_BUTTON, self.eventButtonAddSpecies, self.buttonAddSpecies)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.eventButtonTogglePeakPicking, self.buttonTogglePeakPicking)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckboxSingleFwhh, self.checkboxSinglePeakFwhm)
        self.Bind(wx.EVT_BUTTON, self.eventButtonSimulate, self.buttonSimulate)
        self.Bind(wx.EVT_BUTTON, self.eventButtonSave, self.buttonSave)
        # end wxGlade


    def __set_properties(self):
        # begin wxGlade: AtroposGui.__set_properties
        self.SetTitle("Atropos - Beta")
        self.SetSize((1234, 849))
        self.radioBoxDisplay.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Ubuntu"))
        self.radioBoxDisplay.SetSelection(0)
        # end wxGlade

        self.listCtrlSmoothing.Hide()
        self.listCtrlSmoothing = ListCtrlSmoothing.ListCtrlSmoothing(self.window_1_pane_1)

        self.listCtrlAssigningSpecies.Hide()
        self.listCtrlAssigningSpecies = ListCtrlAssigningSpecies.ListCtrlAssigningSpecies(self.window_1_pane_1,self)

        self.listCtrlOptimise.Hide()
        self.listCtrlOptimise = ListCtrlOptimisation.ListCtrlOptimisation(self.window_1_pane_1)
        self.settings = AtroposGuiSettings.AtroposGuiSettings()
        self.msPanel = MassSpectrumPanel.MassSpectrumPanel(self.window_1_pane_2,self.settings,self)
        
        self.settings.setMsPanel(self.msPanel)
        self.settings.setListCtrlSmoothing(self.listCtrlSmoothing)
        self.settings.setListCtrlAssigningSpecies(self.listCtrlAssigningSpecies)
        self.settings.setListCtrlOptimise(self.listCtrlOptimise)
        
        self.msPanel.setSettings(self.settings)
        self.listCtrlSmoothing.setSettings(self.settings)
        self.listCtrlAssigningSpecies.setSettings(self.settings)
        self.listCtrlOptimise.setSettings(self.settings)
        
    def __do_layout(self):
        # begin wxGlade: AtroposGui.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(4, 1, 0, 0)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        grid_sizer_5 = wx.FlexGridSizer(3, 1, 0, 0)
        grid_sizer_11 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_10 = wx.FlexGridSizer(1, 3, 0, 0)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        grid_sizer_4 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_9 = wx.FlexGridSizer(1, 2, 0, 0)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_3 = wx.FlexGridSizer(3, 1, 0, 0)
        self.sizer_2_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_7 = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_6 = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_6.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_6.Add(self.textCtrlOpen, 0, wx.EXPAND, 0)
        grid_sizer_6.Add(self.buttonOpen, 0, 0, 0)
        grid_sizer_6.AddGrowableCol(1)
        grid_sizer_2.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_7.Add(self.textCtrlGrain, 0, wx.EXPAND, 0)
        grid_sizer_7.Add(self.buttonLoad, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_7.AddGrowableCol(0)
        grid_sizer_2.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_2.AddGrowableCol(0)
        sizer_2.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.listCtrlSmoothing, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.buttonUpdate, 0, wx.EXPAND | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.radioBoxDisplay, 0, wx.EXPAND, 0)
        grid_sizer_3.AddGrowableRow(0)
        grid_sizer_3.AddGrowableCol(0)
        sizer_3.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.listCtrlAssigningSpecies, 1, wx.EXPAND, 0)
        grid_sizer_9.Add(self.buttonAddSpecies, 0, 0, 0)
        grid_sizer_9.Add(self.buttonTogglePeakPicking, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_9.AddGrowableCol(1)
        grid_sizer_4.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        grid_sizer_4.AddGrowableRow(0)
        grid_sizer_4.AddGrowableCol(0)
        sizer_4.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_10.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_10.Add(self.textCtrlSinglePeakFwhm, 0, 0, 0)
        grid_sizer_10.Add(self.checkboxSinglePeakFwhm, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_10.AddGrowableCol(0)
        grid_sizer_5.Add(grid_sizer_10, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.listCtrlOptimise, 1, wx.EXPAND, 0)
        grid_sizer_11.Add(self.buttonSimulate, 0, wx.EXPAND | wx.ALIGN_RIGHT, 0)
        grid_sizer_11.Add(self.buttonSave, 0, wx.EXPAND, 0)
        grid_sizer_11.AddGrowableCol(0)
        grid_sizer_11.AddGrowableCol(1)
        grid_sizer_5.Add(grid_sizer_11, 1, wx.EXPAND, 0)
        grid_sizer_5.AddGrowableRow(1)
        grid_sizer_5.AddGrowableCol(0)
        sizer_5.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(grid_sizer_1)
        grid_sizer_1.AddGrowableRow(2)
        grid_sizer_1.AddGrowableRow(3)
        grid_sizer_1.AddGrowableCol(0)
        self.window_1.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 350)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        self.textCtrlOpen.SetValue('')
        self.simulationCompleted = False

    def eventButtonOpen(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Open mass spectrum data file using a file dialog. eventButtonLoad()
        shows the spectrum.
        """
        dlg = wx.FileDialog(self, message="Open Mass Spectrum Data",
                            defaultFile="",
                            wildcard="Amphitrite IM file (*.a)|*.a|Text file (*.txt)|*.txt",
                            style=wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.settings.openFilePath = dlg.GetPath()
            self.textCtrlOpen.SetValue(self.settings.openFilePath)
        dlg.Destroy()
        

    def eventButtonLoad(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Open mass spectrum and display it. Takes information from grain and openFilePath()."""
        path = self.textCtrlOpen.GetValue()
        self.settings.openFilePath = path

        if path[-4:] == '.txt':
            # textfile only
            grain = self.textCtrlGrain.GetValue()
            success = 0
            if grain != '':
                try: grain = float(self.textCtrlGrain.GetValue()) ; success = 1
                except: print 'Grain value not a float' 
            if success:
                self.msPanel.loadTextFile(path,grain)
            else:
                self.msPanel.loadTextFile(path)
        elif path[-2:] == '.a':
            self.msPanel.loadAmphiFile(path)
        else:
            message = \
'''
Problem with file extension:
%s
Aborting...
''' %path
            gf.warningDialog(message)
        
    def eventButtonUpdate(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Update mass spectrum after applying smoothing parameters."""
        smoothing,wlen,smths,poly = self.listCtrlSmoothing.getValues()
        if smoothing:
            self.msPanel.smoothing(wlen, smths, poly)
        self.settings.listCtrlAssigningSpecies.clearPeakIdFields()

        selection = self.radioBoxDisplay.GetSelection()
        if selection == 1:
            self._displayPeaks()
        else:
            self.radioBoxDisplay.SetSelection(0)

    def eventAddPeak(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Add additional peaks to those automatically detected using first derivative."""
        mz = self.textCtrlAddPeak.GetValue()
        if utils.isNumber(mz):
            self.settings.addPeakMz(float(mz))
            
            limit = self.settings.getLimit()
            self.msPanel.plotMsWithGpeaks(limit)
        else:
            dlg = wx.MessageDialog(self,
                        "Enter numerical m/z value!",
                        "Add Peak Error", wx.OK|wx.ICON_EXCLAMATION)
            result = dlg.ShowModal()
            dlg.Destroy()           
        
    def eventCheckboxSingleFwhh(self, event):  # wxGlade: AtroposGui.<event_handler>
        # TODO(gns) - get rid of this event, nothing needs to happen when box is checked.
        print "Event handler `eventCheckboxSingleFwhh' not implemented!"
        event.Skip()

    def eventButtonSimulate(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Simulate mass spectrum, display it and fill in the optimise ListCtrl with the
        deconvolution results. 
        """
        # please wait dialog
        bi = wx.BusyInfo("Simulating Spectrum...",self)
        wx.Yield()
        
        oneFwhm = 0
        if self.checkboxSinglePeakFwhm.GetValue():
            oneFwhm = utils.isNumber(self.textCtrlSinglePeakFwhm.GetValue())
            if oneFwhm:
                oneFwhm = float(self.textCtrlSinglePeakFwhm.GetValue())
            else:
                print 'Unrecognised value for single FWHM\nUsing default(10)'
                oneFwhm = 10
        self.settings.leastSquaresOptimisation(oneFwhm)
        self.simulationCompleted = True
        self.radioBoxDisplay.SetSelection(3)
        self.listCtrlOptimise.calculatePercentageArea()
        self.listCtrlOptimise.calculatePercentageIntensity()

        # please wait dialog
        bi.Destroy()

    def eventButtonSave(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Save the mass spectrum fit as a pickle."""
        dlg = wx.FileDialog(self, message="Save Amphitrite MassSpectrum Fit",
                            defaultFile="",wildcard="Amphitrite Fit File (*.afit)|*.afit|Text file (*.txt)|*.txt",
                            style=wx.SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            p = dlg.GetPath()  
            if not p.endswith('.afit'):
                p += '.afit'
            self.settings.atroposPath = p          

            msOut = copy.deepcopy(self.msPanel.ms)
            del msOut.xvals
            del msOut.yvals
            pickle.dump(msOut,open(p,'wb'))
            print 'Saved'        

    def _displayPeaks(self):
        """Show peaks found using first derivative and those added manually."""
        limit = self.settings.getLimit()           
        numberOfPeaksFound = self.msPanel.plotMsWithGpeaks(limit)
        if numberOfPeaksFound != None:
            message = \
'''Over 2000 peaks found (%d)

Please reduce by doing one of the following:
+ Increase smoothing
+ Increase peak identification limit
+ Increase the grain of spectrum (text input only)
''' %numberOfPeaksFound
            gf.warningDialog(message)
            self.radioBoxDisplay.SetSelection(0)
        
    def eventRadioBoxDisplay(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Switch what is being displayed in the plot panel. Options are; plain mass spectrum,
        ms with peaks and identifiers, theoretical charge states for a molecular species and
        the result of the simulation.
        """
        # TODO(gns) - popup window asking which species you want to show in theo z states
        selection = self.radioBoxDisplay.GetSelection()
        if selection == 0: # None
            self.msPanel.plotMassSpectrum()
            
        elif selection == 1: # Peak picking
            self._displayPeaks()
            
        elif selection == 2: # Theoretical charge states
            # first case -> user entered the peakIds and calculated mass
            # second     -> user only entered mass
            try:
                column = self.settings.getSpeciesColumn()
            except:
                column = 1
            charges = self.listCtrlAssigningSpecies.listCtrl.GetItem(5,column).GetText()
            if charges != '':
                speciesName = self.listCtrlAssigningSpecies.listCtrl.GetItem(0,column).GetText()
                self.msPanel.plotMsWithTheoZs(speciesName)
            else:
                mass = self.listCtrlAssigningSpecies.listCtrl.GetItem(3,column).GetText()
                self.listCtrlAssigningSpecies.setManualMass(mass)
        elif selection == 3: # Simulation
            if self.simulationCompleted:
                self.settings.plotLeastSquaresSimulationForToggle()
                self.radioBoxDisplay.SetSelection(3)
            else:
                print 'Species simulation not yet completed'
        else:
            print 'Check eventRadioBoxDisplay(): unknown selection'
        

    def eventButtonAddSpecies(self, event):  # wxGlade: AtroposGui.<event_handler>
        """Add an extra column to the assigning species ListCtrl for adding an additional
        molecular species (e.g. monomer, dimer).
        """
        self.listCtrlAssigningSpecies.addSpeciesColumn()

    def eventButtonTogglePeakPicking(self, event):  # wxGlade: AtroposGui.<event_handler>
        """This function just activates the peak picking so that the on_pick() function
        is able to record mouse clicks.
        When the toggle is turned off then the value is registered.
        """
        if self.buttonTogglePeakPicking.GetValue() == True:
            self.msPanel.pickingActive = True
            self.msPanel.axMs.set_picker(True)
            self.msPanel.pickedPeakIdLimit -= 1

        elif self.buttonTogglePeakPicking.GetValue() == False:
            
            self.msPanel.pickingActive = False
            self.msPanel.pickedAlready = False

            if self.msPanel.pickedValue:

                peakId = self.msPanel.pickedPeakIdLimit
                yi = utils.closest(self.msPanel.pickedValue, self.msPanel.ms.xvals)
                y = self.msPanel.ms.yvals[yi]
                self.msPanel.ms.gPeaks[peakId] = [self.msPanel.pickedValue,y]
                self.settings.addPeakMz(self.msPanel.pickedValue)
            else:
                self.msPanel.pickedPeakIdLimit += 1
            self.msPanel.pickedValue = None



# end of class AtroposGui
if __name__ == "__main__":
    app = wx.App(0)
    wx.InitAllImageHandlers()
    frame_1 = AtroposGui(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()

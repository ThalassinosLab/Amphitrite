#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.5 on Wed May  1 14:12:10 2013

import wx,os
from lib import utils
import CtrPlotPanel,CtrSettings
from imClasses import Im
import gui.guiFunctions as gf
# begin wxGlade: extracode
# end wxGlade

"""Program for displaying 3D ion mobility data as contour plots."""

__author__ = "Ganesh N. Sivalingam <g.n.sivalingam@gmail.com"


class ContourGui(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ContourGui.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1)
        self.textCtrlFile1 = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonOpenFile1 = wx.Button(self.window_1_pane_1, -1, _("Open"))
        self.sizer_2_staticbox = wx.StaticBox(self.window_1_pane_1, -1, _("Input File"))
        self.label_1 = wx.StaticText(self.window_1_pane_1, -1, _("Calibration File"))
        self.textCtrlCalibration = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonCalibration = wx.Button(self.window_1_pane_1, -1, _("Open"))
        self.label_2 = wx.StaticText(self.window_1_pane_1, -1, _("Atropos File"))
        self.textCtrlAtropos = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonAtropos = wx.Button(self.window_1_pane_1, -1, _("Open"))
        self.label_3 = wx.StaticText(self.window_1_pane_1, -1, _("Species"))
        self.choiceSpecies = wx.Choice(self.window_1_pane_1, -1, choices=[_("Apply to all")])
        self.label_4 = wx.StaticText(self.window_1_pane_1, -1, _("Width Multiplier L "))
        self.textCtrlWidthL = wx.TextCtrl(self.window_1_pane_1, -1, _("1.0"))
        self.label_5 = wx.StaticText(self.window_1_pane_1, -1, _("Width Multiplier R "))
        self.textCtrlWidthR = wx.TextCtrl(self.window_1_pane_1, -1, _("1.0"))
        self.checkboxAutoLimits = wx.CheckBox(self.window_1_pane_1, -1, _("Auto Limits"))
        self.panel_1 = wx.Panel(self.window_1_pane_1, -1)
        self.sizer_7_staticbox = wx.StaticBox(self.window_1_pane_1, -1, _("Charge State Limits"))
        self.sizer_3_staticbox = wx.StaticBox(self.window_1_pane_1, -1, _("Convert to CCS"))
        self.label_9 = wx.StaticText(self.window_1_pane_1, -1, _("Smoothes"))
        self.textCtrlSmoothes = wx.TextCtrl(self.window_1_pane_1, -1, _("2"))
        self.label_10 = wx.StaticText(self.window_1_pane_1, -1, _("Window Length "))
        self.textCtrlWlen = wx.TextCtrl(self.window_1_pane_1, -1, _("3"))
        self.label_11 = wx.StaticText(self.window_1_pane_1, -1, _("Limit"))
        self.textCtrlLimit = wx.TextCtrl(self.window_1_pane_1, -1, _("0"))
        self.checkboxShowPeakTops = wx.CheckBox(self.window_1_pane_1, -1, _("Show Peak Tops"))
        self.sizer_4_staticbox = wx.StaticBox(self.window_1_pane_1, -1, _("Peak Picking"))
        self.textCtrlFile2 = wx.TextCtrl(self.window_1_pane_1, -1, "")
        self.buttonOpenFile2 = wx.Button(self.window_1_pane_1, -1, _("Open"))
        self.checkboxDifferencePlot = wx.CheckBox(self.window_1_pane_1, -1, _("Show Difference Plot"))
        self.sizer_5_staticbox = wx.StaticBox(self.window_1_pane_1, -1, _("Secondary File"))
        self.radioboxPlotPanel = wx.RadioBox(self.window_1_pane_1, -1, _("Display"), choices=[_("Arrival Time vs. m/z"), _("CCS vs. m/z")], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.checkboxShowChargeStatePlot = wx.CheckBox(self.window_1_pane_1, -1, _("Show Charge State Plot"))
        self.choiceChargeStatePlotSpecies = wx.Choice(self.window_1_pane_1, -1, choices=[_("<Species>")])
        self.static_line_1 = wx.StaticLine(self.window_1_pane_1, -1)
        self.label_6 = wx.StaticText(self.window_1_pane_1, -1, _("Scale"))
        self.choiceScale = wx.Choice(self.window_1_pane_1, -1, choices=[_("Linear"), _("Log")])
        self.label_7 = wx.StaticText(self.window_1_pane_1, -1, _("Colour Max "))
        self.textCtrlVmax = wx.TextCtrl(self.window_1_pane_1, -1, _("100"))
        self.label_8 = wx.StaticText(self.window_1_pane_1, -1, _("Background Colour"))
        self.choiceBackgroundColour = wx.Choice(self.window_1_pane_1, -1, choices=[_("White"), _("Black")])
        self.checkboxShowMassSpectrum = wx.CheckBox(self.window_1_pane_1, -1, _("Show Mass Spectrum"))
        self.sizer_6_staticbox = wx.StaticBox(self.window_1_pane_1, -1, _("Plotting Options"))
        self.panePlotting = wx.Panel(self.window_1, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.eventTextCtrlFile1, self.textCtrlFile1)
        self.Bind(wx.EVT_BUTTON, self.eventButtonOpenFile1, self.buttonOpenFile1)
        self.Bind(wx.EVT_BUTTON, self.eventButtonCalibration, self.buttonCalibration)
        self.Bind(wx.EVT_BUTTON, self.eventButtonAtropos, self.buttonAtropos)
        self.Bind(wx.EVT_CHOICE, self.eventChoiceSpecies, self.choiceSpecies)
        self.Bind(wx.EVT_TEXT, self.eventTextCtrlWidthL, self.textCtrlWidthL)
        self.Bind(wx.EVT_TEXT, self.eventTextCtrlWidthR, self.textCtrlWidthR)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckboxAutoLimits, self.checkboxAutoLimits)
        self.Bind(wx.EVT_TEXT, self.eventTextCtrlSmoothes, self.textCtrlSmoothes)
        self.Bind(wx.EVT_TEXT, self.eventTextCtrlWlen, self.textCtrlWlen)
        self.Bind(wx.EVT_TEXT, self.eventTextCtrlLimit, self.textCtrlLimit)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckboxShowPeakTops, self.checkboxShowPeakTops)
        self.Bind(wx.EVT_TEXT_ENTER, self.eventTextCtrlFile2, self.textCtrlFile2)
        self.Bind(wx.EVT_BUTTON, self.eventButtonOpenFile2, self.buttonOpenFile2)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckboxDifferencePlot, self.checkboxDifferencePlot)
        self.Bind(wx.EVT_RADIOBOX, self.eventRadioboxPlotPanel, self.radioboxPlotPanel)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckboxShowChargeStatePlot, self.checkboxShowChargeStatePlot)
        self.Bind(wx.EVT_CHOICE, self.eventChoiceChargeStatePlotSpecies, self.choiceChargeStatePlotSpecies)
        self.Bind(wx.EVT_CHOICE, self.eventChoiceScale, self.choiceScale)
        self.Bind(wx.EVT_TEXT_ENTER, self.eventTextCtrlVmaxEnter, self.textCtrlVmax)
        self.Bind(wx.EVT_TEXT, self.eventTextCtrlVmax, self.textCtrlVmax)
        self.Bind(wx.EVT_CHOICE, self.eventChoiceBackgroundColour, self.choiceBackgroundColour)
        self.Bind(wx.EVT_CHECKBOX, self.eventChoiceBackgroundColour, self.checkboxShowMassSpectrum)
        # end wxGlade

        ########################################
        # Establish inter-object references
        self.plotPanel.setSettings(self.settings)
        self.plotPanel.setGui(self)

        self.settings.setPlotPanel(self.plotPanel)
        self.settings.setGui(self)
        
        ########################################



    def __set_properties(self):
        # begin wxGlade: ContourGui.__set_properties
        self.SetTitle(_("Contour Plot - beta"))
        self.SetSize((1085, 799))
        self.choiceSpecies.SetSelection(0)
        self.radioboxPlotPanel.SetSelection(0)
        self.choiceChargeStatePlotSpecies.SetSelection(0)
        self.choiceScale.SetMinSize((120, 29))
        self.choiceScale.SetSelection(0)
        self.choiceBackgroundColour.SetSelection(0)
        self.checkboxShowMassSpectrum.SetValue(1)
        # end wxGlade
        ########################################
        # Creating my objects
        self.panePlotting.Hide()
        self.plotPanel = CtrPlotPanel.CtrPlotPanel(self.panePlotting)

        self.settings = CtrSettings.CtrSettings()
        
        ########################################

        
        
    def __do_layout(self):
        # begin wxGlade: ContourGui.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(5, 1, 0, 0)
        self.sizer_6_staticbox.Lower()
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        grid_sizer_8 = wx.FlexGridSizer(6, 1, 0, 0)
        grid_sizer_9 = wx.FlexGridSizer(4, 2, 0, 0)
        grid_sizer_12 = wx.FlexGridSizer(1, 2, 0, 0)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        grid_sizer_6 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_7 = wx.FlexGridSizer(1, 2, 0, 0)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        grid_sizer_10 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_11 = wx.FlexGridSizer(4, 2, 0, 0)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(2, 1, 0, 0)
        self.sizer_7_staticbox.Lower()
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        grid_sizer_4 = wx.FlexGridSizer(4, 2, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(2, 3, 0, 0)
        self.sizer_2_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        grid_sizer_5 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_5.Add(self.textCtrlFile1, 0, wx.EXPAND, 0)
        grid_sizer_5.Add(self.buttonOpenFile1, 0, 0, 0)
        grid_sizer_5.AddGrowableCol(0)
        sizer_2.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.textCtrlCalibration, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.buttonCalibration, 0, 0, 0)
        grid_sizer_3.Add(self.label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.textCtrlAtropos, 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.buttonAtropos, 0, 0, 0)
        grid_sizer_3.AddGrowableCol(1)
        grid_sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.choiceSpecies, 0, wx.EXPAND, 0)
        grid_sizer_4.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.textCtrlWidthL, 0, wx.EXPAND, 0)
        grid_sizer_4.Add(self.label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_4.Add(self.textCtrlWidthR, 0, wx.EXPAND, 0)
        grid_sizer_4.Add(self.checkboxAutoLimits, 0, 0, 0)
        grid_sizer_4.Add(self.panel_1, 1, wx.EXPAND, 0)
        grid_sizer_4.AddGrowableCol(1)
        sizer_7.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_2.Add(sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_2.AddGrowableCol(0)
        sizer_3.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_11.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_11.Add(self.textCtrlSmoothes, 0, wx.EXPAND, 0)
        grid_sizer_11.Add(self.label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_11.Add(self.textCtrlWlen, 0, wx.EXPAND, 0)
        grid_sizer_11.Add(self.label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_11.Add(self.textCtrlLimit, 0, wx.EXPAND, 0)
        grid_sizer_11.AddGrowableCol(0)
        grid_sizer_10.Add(grid_sizer_11, 1, wx.EXPAND, 0)
        grid_sizer_10.Add(self.checkboxShowPeakTops, 0, 0, 0)
        grid_sizer_10.AddGrowableCol(0)
        sizer_4.Add(grid_sizer_10, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.textCtrlFile2, 0, wx.EXPAND, 0)
        grid_sizer_7.Add(self.buttonOpenFile2, 0, 0, 0)
        grid_sizer_7.AddGrowableCol(0)
        grid_sizer_6.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_6.Add(self.checkboxDifferencePlot, 0, 0, 0)
        grid_sizer_6.AddGrowableCol(0)
        sizer_5.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(self.radioboxPlotPanel, 0, wx.EXPAND, 0)
        grid_sizer_12.Add(self.checkboxShowChargeStatePlot, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.choiceChargeStatePlotSpecies, 0, wx.EXPAND, 0)
        grid_sizer_12.AddGrowableCol(1)
        grid_sizer_8.Add(grid_sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(self.static_line_1, 0, wx.EXPAND, 0)
        grid_sizer_9.Add(self.label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_9.Add(self.choiceScale, 0, 0, 0)
        grid_sizer_9.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_9.Add(self.textCtrlVmax, 0, wx.EXPAND, 0)
        grid_sizer_9.Add(self.label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_9.Add(self.choiceBackgroundColour, 0, wx.EXPAND, 0)
        grid_sizer_9.AddGrowableCol(0)
        grid_sizer_8.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(self.checkboxShowMassSpectrum, 0, 0, 0)
        grid_sizer_8.AddGrowableCol(0)
        sizer_6.Add(grid_sizer_8, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_6, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(grid_sizer_1)
        grid_sizer_1.AddGrowableCol(0)
        self.window_1.SplitVertically(self.window_1_pane_1, self.panePlotting, 290)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def eventTextCtrlFile1(self, event):  # wxGlade: ContourGui.<event_handler>
        # TODO(gns) - probably get rid of this (in wxglade)
        # TEXT ENTER FUNCTION, SO DOESN'T DO ANYTHING
        # See notes for how to fix
        print "Event handler `eventTextCtrlFile1' not implemented"
        event.Skip()

    def eventButtonOpenFile1(self, event):  # wxGlade: ContourGui.<event_handler>
        """Open primary amphitrite data file ('.a').
        """
        imOb = self.openSingleAmphitriteDataFile(event,self.textCtrlFile1)
        if imOb:
            self.settings.setImOb(imOb)
            
    def openSingleAmphitriteDataFile(self,event,textCtrl):
        """Open amphitrite data file ('.a'), using path form textCtrl.
        :parameter textCtrl: Data file textCtrl, usually self.textCtrlFile1
        """
            dlg = wx.FileDialog(
            self,message = 'Select Amphitrite Data File',
            defaultFile = self.settings.defaultDirectory,
            wildcard = 'Amphitrite data file (*.a)|*.a',
            style=wx.OPEN | wx.CHANGE_DIR)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.settings.defaultDirectory = os.path.dirname(path)
            textCtrl.SetValue(path)
            # deal with data
            dataList = utils.unPickleAmphitriteProject(path)
            if dataList:
                imOb = Im.Im()
                imOb.setDataFromAmphiExtract(dataList)
                imOb.normalisationBpi()
                imOb.generateMassSpectrum()
                imOb.massSpectrum.normalisationBpi()
                return imOb
            else:
                message = 'Error in amphitrite file: %s' %path
                gf.warningDialog(message)
        dlg.Destroy()
        

    def eventButtonCalibration(self, event):  # wxGlade: ContourGui.<event_handler>
        """Open a pickled calibration object ('.calibration')
        """
        path = gf.openCalibrationFile(self)
        if path:
            self.textCtrlCalibration.SetValue(path)
            self.settings.setCalibration(path)
        else:
            # TODO(gns) - This should be a popup window
            print 'Calibration path problem: %s' %path

    def eventButtonAtropos(self, event):  # wxGlade: ContourGui.<event_handler>
        """Load a pickled mass spectrum fit (Atropos()) object.
        """
        path = gf.openAtroposFile(self)
        if path:
            self.textCtrlAtropos.SetValue(path)
            self.settings.loadAtroposSpecies(path)
            self.plotPanel.refresh_plot()

            # set charge state plot species choicebox
            self.choiceChargeStatePlotSpecies.Clear()
            for sp in self.settings.species[1:]:
                self.choiceChargeStatePlotSpecies.Append(sp)
            self.choiceChargeStatePlotSpecies.SetSelection(0)
        else:
            # TODO(gns) - should be a popup window
            print 'Atropos path problem: %s' %path


    def eventChoiceSpecies(self, event):  # wxGlade: ContourGui.<event_handler>
        """Choose which species to apply peak extraction m/z limits to.
        """
        species = event.GetString()
        print '================ %s' %species
        wL = self.settings.widthL[species]
        self.textCtrlWidthL.SetValue('%.1f' %wL)
        wR = self.settings.widthR[species]
        self.textCtrlWidthR.SetValue('%.1f' %wR)

    def eventTextCtrlWidthL(self, event):  # wxGlade: ContourGui.<event_handler>
        """Set the peak width (FWHM) multiplier to use for below the peak centre.
        (Is used to change the m/z window which is used for a charge state peak.)
        """
        val = gf.checkIfNumberTextCtrl(self.textCtrlWidthL)
        species = self.choiceSpecies.GetStringSelection()

        if type(val).__name__ != 'str':
            if species != 'Apply to all':
                self.settings.setWidthL(val,species)
            else:
                print 'sdasd'
                for sp in self.settings.widthL.keys():
                    self.settings.setWidthL(val,sp)
            self.plotPanel.refresh_plot()
        else:
            message = 'Please only enter numbers in this box!'
            gf.warningDialog(message)
            self.textCtrlWidthL.SetValue(str(self.settings.widthL[species])) 

            
    def eventTextCtrlWidthR(self, event):  # wxGlade: ContourGui.<event_handler>
        """Set the peak width (FWHM) multiplier to use for above the peak centre.
        (Is used to change the m/z window which is used for a charge state peak.)
        """
        val = gf.checkIfNumberTextCtrl(self.textCtrlWidthR)
        species = self.choiceSpecies.GetStringSelection()
        if type(val).__name__ != 'str':
            if species != 'Apply to all':
                self.settings.setWidthR(val,species)
            else:
                for sp in self.settings.widthR.keys():
                    self.settings.setWidthR(val,sp)
            self.plotPanel.refresh_plot()
        else:
            message = 'Please only enter numbers in this box!' 
            gf.warningDialog(message)
            self.textCtrlWidthR.SetValue(str(self.settings.widthR[species]))


    def eventTextCtrlSmoothes(self, event):  # wxGlade: ContourGui.<event_handler>
        """Triggered when the value for number of smoothes is changed.
        """
        # TODO(gns) - This should check that the entered value is valid
        print "Event handler `eventTextCtrlSmoothes' not implemented"
        event.Skip()

    def eventTextCtrlWlen(self, event):  # wxGlade: ContourGui.<event_handler>
        """Triggered when the value for window size for smoothing is changed.
        """
        # TODO(gns) - This should check that the entered value is valid
        print "Event handler `eventTextCtrlWlen' not implemented"
        event.Skip()

    def eventCheckboxShowChargeStatePlot(self, event):  # wxGlade: ContourGui.<event_handler>
        """Change display to a contour plot version of the classic
        Clemmer charge state CCS diagram.
        """
        self.plotPanel.refresh_plot()

    def eventCheckboxShowPeakTops(self, event):  # wxGlade: ContourGui.<event_handler>
        """Automatically pick peak tops in the CCS axis, and display them
        as circles.
        """
        self.plotPanel.refresh_plot()

    def eventTextCtrlFile2(self, event):  # wxGlade: ContourGui.<event_handler>
        """Path to a second file is added. The second file is used for
        difference plots to the primary file.
        """
        # TODO(gns) - If there's no event, remove the function
        event.Skip()

    def eventButtonOpenFile2(self, event):  # wxGlade: ContourGui.<event_handler>
        """Open the secondary amphitrite data file ('.a')for use in
        difference plots.        
        """
        imOb = self.openSingleAmphitriteDataFile(event,self.textCtrlFile2)
        if imOb:
            self.checkboxDifferencePlot.SetValue(True)
            self.settings.setImOb2(imOb)

    def eventCheckboxDifferencePlot(self, event):  # wxGlade: ContourGui.<event_handler>
        """Toggle between displaying the primary file and displaying a
        difference plot between both files.
        """
        self.plotPanel.refresh_plot()

    def eventRadioboxPlotPanel(self, event):  # wxGlade: ContourGui.<event_handler>
        """Select between plotting arrival time and CCS on the y axis.
        """
        self.plotPanel.refresh_plot()

    def eventChoiceScale(self, event):  # wxGlade: ContourGui.<event_handler>
        """Choose between using log and linear scaling for the intensity and
        is represented as colour saturation. 
        """
        self.plotPanel.refresh_plot()

    def eventTextCtrlVmaxEnter(self, event):  # wxGlade: ContourGui.<event_handler>
        # TODO(gns) - get rid of this
        event.Skip()

    def eventTextCtrlVmax(self, event):  # wxGlade: ContourGui.<event_handler>
        """The value used for the maximum color saturation value.
        """
        val = gf.checkIfNumberTextCtrl(self.textCtrlVmax)
        if type(val).__name__ != 'str':
            self.plotPanel.setVmax(val)
            self.plotPanel.refresh_plot()
        else:
            message = 'Please only enter numbers in this box!'
            gf.warningDialog(message)
            self.textCtrlVmax.SetValue(str(self.plotPanel.vmax))         

    def eventChoiceBackgroundColour(self, event):  # wxGlade: ContourGui.<event_handler>
        """Switch between black and white background colour for
        the plotting panel.
        """
        colour = event.GetString()
        if colour == 'White':
            self.plotPanel.backgroundColour = 'white'
        elif colour == 'Black':
            self.plotPanel.backgroundColour = 'black'
        self.plotPanel.updateColourMap()
        self.plotPanel.refresh_plot()
 
    def eventTextCtrlLimit(self, event):  # wxGlade: ContourGui.<event_handler>
        """Enter the limit for ignoring peaks when peak picking for "Show peak
        tops" check box. Value is given as percentage of base peak intensity.
        """
        val = gf.checkIfNumberTextCtrl(self.textCtrlLimit)
        if type(val).__name__ == 'str':
            message = 'Please only enter numbers in this box!'
            gf.warningDialog(message)
            self.textCtrlLimit.SetValue(self.settings.limit) # (its left as a string)
        else:
            self.settings.limit = self.textCtrlLimit.GetValue()
            
    def eventChoiceChargeStatePlotSpecies(self, event):  # wxGlade: ContourGui.<event_handler>
        """Pick which molecular species to use when creating a charge
        state plot.
        """
        self.plotPanel.refresh_plot()

    def eventCheckboxAutoLimits(self, event):  # wxGlade: ContourGui.<event_handler>
        """Request the program to automatically fit the largest peak m/z window
        for extraction that doesn't overlap with other peaks.
        """
        self.plotPanel.refresh_plot()

# end of class ContourGui
if __name__ == "__main__":
    import gettext
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = ContourGui(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
